#+TITLE: Emacs Configuración

* Emacs paquetes
  Agrego los siguientes paquetes para las futuras instalaciones, la conexión por el puerto 443 no me fue posible, por lo que lo paso al  80 como normalmente lo hacía
  #+BEGIN_SRC emacs-lisp :tangle yes
	(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
							 ("melpa" . "http://melpa.org/packages/")))

 (if (version< emacs-version "27")
	 (package-initialize)
   (setq package-quickstart t))
  #+END_SRC

** Use packages
   Instalar use-package para poder gestionar de mejor forma nuestra configuración y los paquetes que instalaremos

   #+BEGIN_SRC emacs-lisp :tangle yes
	 (unless (package-installed-p 'use-package)
	   (package-refresh-contents)
	   (package-install 'use-package t))
  (setq-default
   use-package-always-defer t
   use-package-always-ensure t)
   #+END_SRC

* Buen entorno
** Swith focus Split
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (defadvice split-window (after move-point-to-new-window activate)
	   "Cambia el cursor al creaar un nuevo buffer"
	   (other-window 1))
   #+END_SRC
** Fullscreen
   #+BEGIN_SRC  emacs-lisp :tangle yes
	 (custom-set-variables
	  '(initial-frame-alist (quote ((fullscreen . maximized)))))
   #+END_SRC
** Configuraciones base

   Configuración base que ayudará a tener un editor limpio y atractivo
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (setq-default
	  inhibit-startup-screen t ;Deshabilita la pantalla de inicio
	  initial-scratch-message "" ; Mensaje que se mostrará  en Scratch buffer

	  major-mode 'text-mode  ; Text mode como predeterminado en nuevos buffers
	  ;;make-backup-files nil ; Deshabilita ~ files
	  auto-save-default nil ; Deshabilita #file#
	  make-backup-files t  ; Hacer respaldos
	  backup-directory-alist `(("." . ,(expand-file-name "backups/" user-emacs-directory))) ;; Carpeta de respaldos
	  ;;version-control t ; Habilitar el control de versiones para respaldos
	  ;;kept-new-versions 4 ; Mantener nuevas versiones
	  ;;kept-old-version 2 ; Mantener versiones pasadas
	  ;;delete-old-version t ; Eliminar versiones antiguas de modo sutil sin preguntar

	  echo-keystrokes 0.1 ; Mostrar ordenes en el minibufer
	  display-time-24hr-format t ; Muestra el reloj en formato 24 hrs
	  display-time-format "%H:%M"; Le da formato a la hora
	  fill-column 80 ; Configura el salto de linea automatico
	  tab-width 4 ; Configura el tamaño del tabulador
	  ident-tabs-mode nil ; Tabula con espacios
	  visible-bell t ; Sin el sonido de la campana pero si visual
	  cursor-in-non-selected-windows t ; Deshabilita el cursor en ventana no visible
	  scroll-conservatively most-positive-fixnum ; Scroll con una linea
	  vc-follow-symlinks t ; Sigue el enlace simbólico
	  ;;confirm-kill-processes nil    ;; Sin confirmación para matar los proceso
	  confirm-kill-emacs nil  ;; Sin confirmación para salir
	  select-enable-clipboard t ; Usa tambien el portapapeles del sistem base
	  save-place-file "~/sync/orgmode-places" ; Asigna el lugar donde se almacenaran las posiones del cursor

	  savehist-file "~/.emacs.d/savehist"
	  history-length t
	  history-delete-duplicates t
	  savehist-save-minibuffer-history 1
	  savehist-additional-variables
	  '(kill-ring
		search-ring
		regexp-search-ring)

										;Codificaiones
	  locale-coding-system 'utf-8
	  default-process-coding-system '(utf-8 . utf-8)

	  )

(fset 'yes-or-no-p 'y-or-n-p) ; Cambia la opción cuando pide yes por y
(display-time-mode 1) ; Muesta la hora
;;(display-battery-mode) ; Muestra el nivel de bateria
(global-unset-key (kbd "C-z")) ; No duerme emacs con C-z
(global-subword-mode) ; Manejar camel-case como palabras distintas
(global-set-key (kbd "C-?") 'help-command) ; Cambia la opcion para mostrar las ayudas
(global-set-key (kbd "M-?") 'mark-paragraph) ; Marca el parrafo
(global-set-key (kbd "C-h") 'delete-backward-char) ; Retroceso
(global-set-key (kbd "M-h") 'backward-kill-word) ; Retroceso por palabras
(global-set-key (kbd "C-+") 'text-scale-increase) ; Incrementa el tamaño de la funte
(global-set-key (kbd "C--") 'text-scale-decrease) ; Decrementa el tamaño de la funte
(global-hl-line-mode) ; Resalta la línea actual
(tool-bar-mode -1) ; Deshabilita la barra de herramientes del menu
(scroll-bar-mode -1) ; Deshabilita el scroll
(menu-bar-mode -1) ; Deshabilita el menu
(column-number-mode 1) ; Muestra el numero de la columna
(show-paren-mode 1) ; Muestra el modo parent
										;(global-set-key (kbd "<f5>") 'menu-bar-mode) ; configura una tecla para mostrar las herramientas del menú

										;Configuración de las codificaciones
(set-language-environment 'utf-8)
(set-default-coding-systems 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(modify-coding-system-alist 'process "*" 'utf-8)

(delete-selection-mode t) ; Sobrescribe el texto seleccinado
(add-hook 'before-save-hook 'delete-trailing-whitespace) ; Elimina espacios sobrantes
(save-place-mode 1) ; Guarda la línea donde estaba el cursor antes de cerrar el editor o el archivo
(savehist-mode t)	; Mantiene el historial
										;(desktop-save-mode 1) ; Guarda la sesión actual de emacs
(size-indication-mode t) ; Muestra el tamaño del archivo

;; Cambia el cursor según el modo en que se encuentre
(defun change-cursor-for-mode ()
  "Cambia el cursor dependiendo el modo"
  (cond
   (overwrite-mode
	(set-cursor-color "red")
	(setq-default cursor-type 'block))
   (buffer-read-only
	(set-cursor-color "yellow")
	(setq-default cursor-type 'box))
   (t
	(set-cursor-color "white")
	(setq-default cursor-type 'bar)
	)))
  (add-hook 'post-command-hook 'change-cursor-for-mode)
   #+END_SRC

** XDG
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (defvar xdg-bin (getenv "XDG_BIN_HOME")
	   "The XDG bin base directory.")

  (defvar xdg-cache (getenv "XDG_CACHE_HOME")
	"The XDG cache base directory.")

(defvar xdg-config (getenv "XDG_CONFIG_HOME")
  "The XDG config base directory.")

  (defvar xdg-data (getenv "XDG_DATA_HOME")
	"The XDG data base directory.")

(defvar xdg-lib (getenv "XDG_LIB_HOME")
  "The XDG lib base directory.")
   #+END_SRC
** WitchKey
   Nos ayudará a saber que tecla usar

   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package which-key
	   :ensure t
	   :init
	   (which-key-mode))
   #+END_SRC
** iBuffer
   Manejo de buffers
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package ibuffer
	   :ensure nil
	   :bind ("C-x C-b" . ibuffer)
	   :init (setq ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold)))
	   :config (use-package ibuffer-projectile
				 :functions all-the-icons-octicon ibuffer-do-sort-by-alphabetic
				 :hook ((ibuffer . (lambda ()
									 (ibuffer-projectile-set-filter-groups)
									 (unless (eq ibuffer-sorting-mode 'alphabetic)
									   (ibuffer-do-sort-by-alphabetic)))))
				 :config
				 (setq ibuffer-projectile-prefix
					   (if (display-graphic-p)
						   (concat
							(all-the-icons-octicon "file-directory"
												   :face ibuffer-filter-group-name-face
												   :v-adjust -0.05
												   :height 1.25)
							" ")
						 "Project: ")))
	   )
   #+END_SRC

** Flycheck
   Revisa la ortografía con este modo

   #+BEGIN_SRC emacs-lisp :tangle yes

	 (use-package flycheck
	   :hook
	   ((org-mode
		 makdown-mode
		 text-mode) . turn-on-flyspell))
   #+END_SRC
** Pretty-mode
   Cambiar ciertos caracteres por unos visualmente atractivos
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package pretty-mode
	   :ensure t
	   :config (global-pretty-mode t))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package fill-column-indicator
	   :hook
	   ((markdown-mode
		 org-mode) . fci-mode))
   #+END_SRC

** Iconos
   Paquete para mostrar iconos en diferentes módulos
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package all-the-icons)
;;(all-the-icons-install-fonts)

   #+END_SRC

** HS
   Modulo para plegar codigo
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (add-hook 'prog-mode-hook (lambda () (hs-minor-mode 1)))
   #+END_SRC

** Origami
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package origami
	   :bind (:map origami-mode-map
				   ("C-`" . origami-hydra/body))
	   :hook (prog-mode . origami-mode)
	   :init (setq origami-show-fold-header t)
	   :config (face-spec-reset-face 'origami-fold-header-face))
   #+END_SRC

** Hightlight
   Resaltar palabras al seleccionar
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package highlight-symbol
	   :bind
	   (:map prog-mode-map
			 ("M-o h" . highlight-symbol)
			 ("M-p" . highlight-symbol-prev)
			 ("M-n" . highlight-symbol-next)))
   #+END_SRC

** Move-up
   Mueve el texto y duplica el texto
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package move-dup
	   :ensure t
	   :bind ( "M-<up>" . md-move-lines-up)
	   ("M-<down>" . md-move-lines-down)
	   ("C-M-<up>" . md-duplicate-up)
	   ("C-M-<down>" . md-duplicate-down)
	   )
   #+END_SRC

** Ace-windows
   Una forma de cambiar entre buffers con numeros
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package ace-window
	   :ensure t
	   :init
	   (progn
		 (setq aw-scope 'global) ;; was frame
		 (global-set-key (kbd "C-x O") 'other-frame)
		 (global-set-key [remap other-window] 'ace-window)
		 (custom-set-faces
		  '(aw-leading-char-face
			((t (:inherit ace-jump-face-foreground :height 3.0)))))
		 ))
   #+END_SRC

** Avy
   Resalta el texto seleccionado
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package avy
	   :ensure t
	   :bind ("M-s" . avy-goto-word-1)) ;;

;; Representación de espacios en blanco
(use-package whitespace
  :ensure nil
  :config
  (set-face-attribute 'whitespace-space nil
					  :background nil
					  :foreground "gray26"
					  )
  (set-face-attribute 'whitespace-newline nil
					  :background nil
					  :foreground "gray25"
					  )
  :hook
  ((python) . whitespace-mode)
  )
   #+END_SRC

** Crux
   Crux para ir al inicio pero sin ir al inicio con espacios
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package crux
	   :ensure t
	   :bind (("C-a" . crux-move-beginning-of-line)))
   #+END_SRC
** Emojify
   Representación de los emojis
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package emojify
	   :ensure t)
   #+END_SRC
** Agressive Ident
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package aggressive-indent
   :hook ((css-mode . aggressive-indent-mode)
		  (emacs-lisp-mode . aggressive-indent-mode)
		  (js-mode . aggressive-indent-mode))
   :custom (aggressive-indent-comments-too))

   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package fzf
	   :ensure t)
   #+END_SRC
** Electric Operator
   Agrega espacios en operadores
   #+BEGIN_SRC  emacs-lisp :tangle yes
	 (use-package electric-operator
	   :delight
	   :hook ((python-mode . electric-operator-mode)
			  (php-mode . electric-operator-mode)
			  (css-mode . electric-operator-mode)
			  (c-mode . electric-operator-mode)
			  ))
   #+END_SRC
** Restclient
   Mi ""postman""
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package restclient
	   :mode ("\\.http\\'" . restclient-mode))
   #+END_SRC

** Undo-tree
   Mejor forma de usar undo
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package undo-tree
	   :diminish undo-tree-mode
	   :config
	   (progn
		 (global-undo-tree-mode)
		 (setq undo-tree-visualizer-timestamps t)
		 (setq undo-tree-visualizer-diff t)))

   #+END_SRC

** Autorevert
   Recarga los archivos al ser modificados
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package autorevert
	   :ensure nil
	   :diminish
	   :hook (after-init . global-auto-revert-mode))
   #+END_SRC

** Spray
   Modo para lectura rápida
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package spray
	   :config
	   (global-set-key (kbd "<f6>") 'spray-mode))
   #+END_SRC
** Rainbow
   Dar colores
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package rainbow-mode
	   :defer 2
	   :delight
	   :hook (prog-mode))
   #+END_SRC
** Highlight-indent-guides
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package highlight-indent-guides
	 :diminish
	 :hook
   ((prog-mode) . highlight-indent-guides-mode)
	 :custom
   (highlight-indent-guides-auto-enabled t)
   (highlight-indent-guides-responsive t)
   (highlight-indent-guides-method 'character))
   #+END_SRC
* Personalización
** Tema
   Configuración de tema
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package spacemacs-theme)

  (use-package doom-themes
	:init (load-theme 'doom-one t)
	:config
	(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
		  doom-themes-enable-italic t) ; if nil, italics is universally disabled
	(doom-themes-visual-bell-config)
	(doom-themes-neotree-config)
	(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
	(doom-themes-treemacs-config)
	(doom-themes-org-config))
   #+END_SRC

** Fuente
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (set-face-attribute 'default nil
						 :family "Fira Code"
						 :height 110
						 :weight 'normal
						 :width 'normal)
   #+END_SRC

*** Habilitar ligatures
	#+BEGIN_SRC emacs-lisp :tangle no
   (when (window-system)
	 (set-frame-font "Fira Code"))
(let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
			   (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
			   (36 . ".\\(?:>\\)")
			   (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
			   (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
			   (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
			   (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
			   (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
			   (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
										;(47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)") ; Comentada porque da error
			   (48 . ".\\(?:x[a-zA-Z]\\)")
			   (58 . ".\\(?:::\\|[:=]\\)")
			   (59 . ".\\(?:;;\\|;\\)")
			   (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
			   (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
			   (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
			   (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
			   (91 . ".\\(?:]\\)")
			   (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
			   (94 . ".\\(?:=\\)")
			   (119 . ".\\(?:ww\\)")
			   (123 . ".\\(?:-\\)")
			   (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
			   (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
			   )
			 ))
  (dolist (char-regexp alist)
	(set-char-table-range composition-function-table (car char-regexp)
						  `([,(cdr char-regexp) 0 font-shape-gstring]))))
 #+END_SRC

* Programación y utilerías
** JavaScript
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package js2-mode
	   :ensure t
	   :mode (("\\.js\\'" . js2-mode)
			  ("\\.jsx\\'" . js2-jsx-mode))
	   :config
	   (setq-default js2-ignored-warnings '("msg.extra.trailing.comma"))
	   (setq-default js2-basic-offset 4))

  (use-package prettier-js
	:ensure t
	:config
	(setq prettier-js-args '(
							 "--trailing-comma" "es5"
							 "--single-quote" "true"
							 "--print-width" "100"
							 ))
	(add-hook 'js2-mode-hook 'prettier-js-mode))

(use-package json-reformat
  :ensure t
  :defer t)


  (use-package json-snatcher
	:ensure t
	:defer t)


(use-package json-mode
  :ensure t
  :defer t
  :requires (json-reformat json-snatcher))

   #+END_SRC
** Vue.js
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package vue-mode
	   :delight "V "
	   :mode "\\.vue\\'"
	   :custom
	   (mmm-submode-decoration-level 0)
	 (vue-html-extra-indent 2))
   #+END_SRC

** PHP
   Configuración para programar en PHP

   #+BEGIN_SRC emacs-lisp :tangle yes

(use-package php-mode
  :ensure t)

(use-package flycheck-phpstan
  :after php-mode
  :ensure nil
  :config
  (setq-default phpstan-level "max")
  (flycheck-add-next-checker 'php 'phpstan)
  (flycheck-add-next-checker 'phpstan 'php-phpmd)
  )

   #+END_SRC
** PlantUML
   UML para isw
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package plantuml-mode
	   :commands plantuml-mode
	   :mode (("\\.puml$" . plantuml-mode)
			  ("\\.plantuml$" . plantuml-mode))
	   :config
	   (setq plantuml-jar-path "/usr/local/bin/plantuml.jar")
	   (setq org-plantuml-jar-path "/usr/local/bin/plantuml.jar")
	   )
   #+END_SRC

** Python
   Configuración para programar en Python
   #+BEGIN_SRC emacs-lisp :tangle yes

(use-package elpy
  :init
  (add-to-list 'auto-mode-alist '("\\.py$" . python-mode))
  :custom
  (elpy-rpc-backend "jedi"))

(use-package pyenv-mode
  :config
  (pyenv-mode))

(use-package virtualenvwrapper
  :ensure t
  :config
  (venv-initialize-interactive-shells)
  (venv-initialize-eshell))

(use-package python
  :ensure nil
  :mode ("\\.py" . python-mode)
  :config
(setq python-indent-offset 4
		py-python-command "python3"
		python-shell-interpreter "python3")
  (elpy-enable))
   #+END_SRC

** TypeScript

   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package tide
	   :after (company flycheck)
	   :preface
	   (defun setup-tide-mode ()
		 (interactive)
		 (tide-setup)
		 (flycheck-mode t)
		 (setq flycheck-check-syntax-automatically '(save mode-enabled))
		 (eldoc-mode t)
		 (tide-hl-identifier-mode t)
		 (company-mode t))
	   :hook (before-save . tide-format-before-save))
   #+END_SRC
** Css
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package css-mode
	   :ensure nil
	 :custom (css-indent-offset 2))
   #+END_SRC
** HTML
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package web-mode
	   :ensure t
	   :mode ("\\.html\\'" "\\.css\\'" "\\.php'")
	   :config
	 (setq web-mode-markup-indent-offset 2)
	 (setq web-mode-css-indent-offset 2)
	 (setq web-mode-code-indent-offset 4)
	   (setq web-mode-enable-current-element-highlight t)
	   (setq web-mode-enable-css-colorization t)
	   (setq web-mode-enable-heredoc-fontification t)
	   (setq web-mode-enable-current-element-highlight t)
	   (setq web-mode-engines-alist '(("php"    . "\\.phtml\\'"))))

   #+END_SRC
* Complementos
** CSV
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package csv-mode
	   :config (setq-default csv-align-padding 2))
   #+END_SRC
** XML
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package xml-mode
	   :ensure nil
	   :mode ("\\.wsdl\\'" "\\.xsd\\'"))
   #+END_SRC
** Dashboard
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package dashboard
	   :ensure t
	   :custom
	   (dashboard-banner-logo-title (format "Buen día %s" user-full-name))
	   (dashboard-startup-banner 'logo)
	   (dashboard-items '((recents . 7)
						  (projects . 5)
						  (bookmarks . 7)
						  ;;(agenda . 5)
						  ))
	   :config
	   (setq dashboard-set-heading-icons t
			 dashboard-set-file-icons t
			 dashboard-set-init-info t
			 dashboard-set-navigator t)
	   (setq dashboard-navigator-buttons
			 `(((,(when (display-graphic-p)
					(all-the-icons-octicon "home" :height 1.1 :v-adjust 0.0))
				 "Página web" "Página personal"
				 (lambda (&rest _) (browse-url "https://localhost/opensource")))
				(,(when (display-graphic-p)
					(all-the-icons-material "home" :height 1.35 :v-adjust -0.24))
				 "Localhost" "Abrir localhost"
				 (lambda (&rest _) (browse-url "http://localhost/")))
				(,(when (display-graphic-p)
					(all-the-icons-octicon "tools" :height 1.0 :v-adjust 0.0))
				 "Configuración" "Abrir configuración de emacs (.org)"
				 (lambda (&rest _) (find-file (expand-file-name "config.org" user-emacs-directory))))
				)))
	   :hook
	   (after-init . dashboard-setup-startup-hook))

   #+END_SRC
** Tabs
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package centaur-tabs
	   :demand
	   :config
	   (setq centaur-tabs-style "wave"
			 centaur-tabs-set-icons t
			 centaur-tabs-set-modified-marker t
			 centaur-tabs-set-bar 'under
			 x-underline-at-descent-line t)
	   (centaur-tabs-headline-match)
	   (centaur-tabs-mode t)
	   :bind
	   ("C-<prior>" . centaur-tabs-backward)
	   ("C-<next>" . centaur-tabs-forward)
	   ("C-c t s" . centaur-tabs-counsel-switch-group)
	   ("C-c t p" . centaur-tabs-group-by-projectile-project)
	   ("C-c t g" . centaur-tabs-group-buffer-groups))
   #+END_SRC
** Linum
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package display-line-numbers
	   :ensure nil
										;:config
										;(set-face-attribute 'line-number-current-line nil
										;		   :background "MediumPurple4")
										;(set-face-attribute 'line-number nil
										;		   :background nil
										;		   :foreground "plum4")
	   :hook
	   ((prog-mode) . display-line-numbers-mode)
	   )

   #+END_SRC
** Model Line
   #+BEGIN_SRC emacs-lisp :tangle yes

(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :init
  ;; prevent flash of unstyled modeline at startup
  (unless after-init-time
	(setq doom-modeline--old-format mode-line-format)
		 (setq-default mode-line-format nil))
	   :custom
	   (doom-modeline-bar-width 3)
	   (doom-modeline-github nil)
	   (doom-modeline-mu4e t)
	   (doom-modeline-persp-name nil)
	   (doom-modeline-major-mode-color-icon t)
	   (doom-modeline-minor-modes nil)
	   (doom-modeline-indent-info t)
	   (doom-modeline-buffer-file-name-style 'truncate-except-project))

   #+END_SRC
** Minions mode
   Mode para mostrar un menu con los modos menores para modeline
   #+BEGIN_SRC emacs-lisp :tangle no
	 (use-package minions
	   :config (minions-mode 1))
   #+END_SRC

** Multi Cursor
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package multiple-cursors
	   :bind (("C-S-c C-S-c" . mc/edit-lines)
			  ("C-S-c C-S-c" . mc/edit-lines)

			  ("C->" . mc/mark-next-like-this)
			  ("C-<" . mc/mark-previous-like-this)

			  ("C-M->" . mc/skip-to-next-like-this)
			  ("C-M-<" . mc/skip-to-previous-like-this)

			  ("C-c C-<" . mc/mark-all-like-this)

			  ("M-<down-mouse-1>")
			  ("M-<mouse-1>" . mc/add-cursor-on-click)
			  )
	   )

   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package flycheck
	   :defer 2
	   :delight
	   :init (global-flycheck-mode)
	   :custom
	   (flycheck-display-errors-delay .3)
	   (flycheck-pylintrc "~/.pylintrc")
	   (flycheck-python-pylint-executable "/usr/bin/pylint")
	   (flycheck-stylelintrc "~/.stylelintrc.json")
	   :config
	   (flycheck-add-mode 'javascript-eslint 'web-mode)
	   (flycheck-add-mode 'typescript-tslint 'web-mode))
   #+END_SRC

** Ivy
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package counsel
	   :ensure t
	   :bind
	   (("M-y" . counsel-yank-pop)
		("M-x" . counsel-M-x)
		("C-x C-f" . counsel-find-file)
		:map ivy-minibuffer-map
		("M-y" . ivy-next-line)))

	 (use-package ivy
	   :ensure t
	   :diminish (ivy-mode)
	   :bind (
			  ("C-c C-r" . ivy-resume)
			  ("C-x b" . ivy-switch-buffer)
			  ("C-x B" . ivy-switch-buffer-other-window))
	   :config
	   (ivy-mode 1)
	   (setq ivy-use-virtual-buffers t
			 ivy-count-format "%d/%d "
			 ivy-display-style 'fancy
			 ivy-pulse-delay nil
			 ivy-use-selectable-prompt t))

	 (use-package ivy-rich
	   :defer 0.1
	   :preface
	   (defun ivy-rich-branch-candidate (candidate)
		 "Displays the branch candidate of the candidate for ivy-rich."
		 (let ((candidate (expand-file-name candidate ivy--directory)))
		   (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
			   ""
			 (format "%s%s"
					 (propertize
					  (replace-regexp-in-string abbreviated-home-dir "~/"
												(file-name-directory
												 (directory-file-name candidate)))
					  'face 'font-lock-doc-face)
					 (propertize
					  (file-name-nondirectory
					   (directory-file-name candidate))
					  'face 'success)))))

	   (defun ivy-rich-compiling (candidate)
		 "Displays compiling buffers of the candidate for ivy-rich."
		 (let* ((candidate (expand-file-name candidate ivy--directory)))
		   (if (or (not (file-exists-p candidate)) (file-remote-p candidate)
				   (not (magit-git-repo-p candidate)))
			   ""
			 (if (my/projectile-compilation-buffers candidate)
				 "compiling"
			   ""))))

	   (defun ivy-rich-file-group (candidate)
		 "Displays the file group of the candidate for ivy-rich"
		 (let ((candidate (expand-file-name candidate ivy--directory)))
		   (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
			   ""
			 (let* ((group-id (file-attribute-group-id (file-attributes candidate)))
					(group-function (if (fboundp #'group-name) #'group-name #'identity))
					(group-name (funcall group-function group-id)))
			   (format "%s" group-name)))))

	   (defun ivy-rich-file-modes (candidate)
		 "Displays the file mode of the candidate for ivy-rich."
		 (let ((candidate (expand-file-name candidate ivy--directory)))
		   (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
			   ""
			 (format "%s" (file-attribute-modes (file-attributes candidate))))))

	   (defun ivy-rich-file-size (candidate)
		 "Displays the file size of the candidate for ivy-rich."
		 (let ((candidate (expand-file-name candidate ivy--directory)))
		   (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
			   ""
			 (let ((size (file-attribute-size (file-attributes candidate))))
			   (cond
				((> size 1000000) (format "%.1fM " (/ size 1000000.0)))
				((> size 1000) (format "%.1fk " (/ size 1000.0)))
				(t (format "%d " size)))))))

	   (defun ivy-rich-file-user (candidate)
		 "Displays the file user of the candidate for ivy-rich."
		 (let ((candidate (expand-file-name candidate ivy--directory)))
		   (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
			   ""
			 (let* ((user-id (file-attribute-user-id (file-attributes candidate)))
					(user-name (user-login-name user-id)))
			   (format "%s" user-name)))))

	   (defun ivy-rich-switch-buffer-icon (candidate)
		 "Returns an icon for the candidate out of `all-the-icons'."
		 (with-current-buffer
			 (get-buffer candidate)
		   (let ((icon (all-the-icons-icon-for-mode major-mode :height 0.9)))
			 (if (symbolp icon)
				 (all-the-icons-icon-for-mode 'fundamental-mode :height 0.9)
			   icon))))
	   :config
	   (plist-put ivy-rich-display-transformers-list
				  'counsel-find-file
				  '(:columns
					((ivy-rich-candidate               (:width 73))
					 (ivy-rich-file-user               (:width 8 :face font-lock-doc-face))
					 (ivy-rich-file-group              (:width 4 :face font-lock-doc-face))
					 (ivy-rich-file-modes              (:width 11 :face font-lock-doc-face))
					 (ivy-rich-file-size               (:width 7 :face font-lock-doc-face))
					 (ivy-rich-file-last-modified-time (:width 30 :face font-lock-doc-face)))))
	   (plist-put ivy-rich-display-transformers-list
				  'counsel-projectile-switch-project
				  '(:columns
					((ivy-rich-branch-candidate        (:width 80))
					 (ivy-rich-compiling))))
	   (plist-put ivy-rich-display-transformers-list
				  'ivy-switch-buffer
				  '(:columns
					((ivy-rich-switch-buffer-icon       (:width 2))
					 (ivy-rich-candidate                (:width 40))
					 (ivy-rich-switch-buffer-size       (:width 7))
					 (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
					 (ivy-rich-switch-buffer-major-mode (:width 20 :face warning)))
					:predicate (lambda (cand) (get-buffer cand))))
	   (ivy-rich-mode 1))

	 (use-package all-the-icons-ivy
	   :after (all-the-icons ivy)
	   :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window))
	   :config
	   (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
	   (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
	   (all-the-icons-ivy-setup))

	 (use-package swiper
	   :ensure t
	   :bind (("C-s" . swiper-isearch)
			  ("C-r" . swiper-isearch))
	   :config
	   (progn
		 (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
		 ))

   #+END_SRC

** Lsp mode
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package lsp-mode
	   :ensure t
	   :commands lsp
	   :custom
	   ;;(lsp-auto-guess-root nil)
	   (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
	   (lsp-enable-file-watchers nil)
	   :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
	   :hook ((python-mode c-mode c++-mode php-mode sh-mode vue-mode) . lsp)
	   :init (setq lsp-auto-guess-root t        ; Detect project root
				   lsp-keep-workspace-alive nil ; Auto-kill LSP server
				   lsp-prefer-flymake nil       ; Use lsp-ui and flycheck
				   flymake-fringe-indicator-position 'right-fringe)
	   )

	 (use-package lsp-ui
	   :after lsp-mode
	   :diminish
	   :commands lsp-ui-mode
	   :custom-face
	   (lsp-ui-doc-background ((t (:background ,(face-background 'tooltip)))))
	   (lsp-ui-sideline-code-action ((t (:inherit warning))))
	   (lsp-ui-doc-heder ((t (:inherit (font-lock-string-face italic)))))
	   :bind (("C-c u" . lsp-ui-imenu)
			  :map lsp-ui-mode-map
			  ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
			  ([remap xref-find-references] . lsp-ui-peek-find-references))
	   :init (setq lsp-ui-doc-enable t
				   lsp-ui-doc-use-webkit t
				   lsp-ui-doc-delay 0.2
				   lsp-ui-doc-include-signature t
				   lsp-ui-doc-position 'at-point
				   lsp-ui-doc-border (face-foreground 'default)
				   lsp-ui-doc-max-width 120
				   lsp-ui-doc-max-height 30
				   lsp-eldoc-enable-hover nil
				   lsp-ui-doc-header t
				   lsp-ui-sideline-enable nil
				   lsp-ui-sideline-show-hover nil
				   lsp-ui-sideline-show-diagnostics nil
				   lsp-ui-sideline-ignore-duplicate t
				   lsp-ui-sideline-show-code-actions nil)
	   :config
	   (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide)
	   (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
		 (setq mode-line-format nil)))

   #+END_SRC

** Dap Mode
   #+BEGIN_SRC  emacs-lisp :tangle yes
	 (use-package dap-mode
	   :diminish
	   :bind (:map lsp-mode-map
				   ("<f5>" . dap-debug))
	   :hook ((after-init . dap-mode)
			  (dap-mode . dap-ui-mode)
			  (dap-session-created . (lambda (_args) (dap-hydra)))
			  (dap-stopped . (lambda (_args) (dap-hydra)))

			  (python-mode . (lambda () (require 'dap-python)))
			  (go-mode . (lambda () (require 'dap-go)))
			  ((c-mode c++-mode objc-mode swift-mode) . (lambda () (require 'dap-lldb)))
			  (php-mode . (lambda () (require 'dap-php)))
			  (elixir-mode . (lambda () (require 'dap-elixir)))
			  ((js-mode js2-mode) . (lambda () (require 'dap-chrome)))
			  (powershell-mode . (lambda () (require 'dap-pwsh)))))
   #+END_SRC

** Autocompletado
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package company
	   :diminish company-mode
	   :defines (company-dabbrev-ignore-case company-dabbrev-downcase)
	   :commands company-abort
	   :bind (("M-/" . company-complete)
			  ("<backtab>" . company-yasnippet)
			  :map company-active-map
			  ("C-p" . company-select-previous)
			  ("C-n" . company-select-next)
			  ("<tab>" . company-complete-common-or-cycle)
			  ("<backtab>" . my-company-yasnippet)
			  ;; ("C-c C-y" . my-company-yasnippet)
			  :map company-search-map
			  ("C-p" . company-select-previous)
			  ("C-n" . company-select-next))
	   :hook (after-init . global-company-mode)
	   :init
	   (defun my-company-yasnippet ()
		 "Hide the current completeions and show snippets."
		 (interactive)
		 (company-abort)
		 (call-interactively 'company-yasnippet))
	   :config
	   (setq company-tooltip-align-annotations t
			 company-tooltip-limit 50
			 company-tooltip-flip-when-above t
			 company-tooltip-maximum-width 20
			 company-idle-delay 0
			 company-echo-delay (if (display-graphic-p) nil 0)
			 company-minimum-prefix-length 2
			 company-require-match nil
			 company-selection-wrap-around t
			 company-dabbrev-ignore-case nil
			 company-dabbrev-downcase nil)

	   (use-package company-prescient
		 :init (company-prescient-mode 1))

	   (use-package company-box
		 :diminish
		 :hook (company-mode . company-box-mode)
		 :init (setq company-box-icons-alist
					 'company-box-icons-all-the-icons)
		 ;;:functions (my-company-box--make-line
		 ;;            my-company-box-icons--elisp)
		 :commands (company-box--get-color
					company-box--resolve-colors
					company-box--add-icon
					company-box--apply-color
					company-box--make-line
					company-box-icons--elisp)
		 :config
		 (setq company-box-backends-colors nil
			   company-box-show-single-candidate t
			   company-box-max-candidates 50
			   company-box-doc-delay 0.5)

		 (defun company-box-icons--elisp (candidate)
		   (when (derived-mode-p 'emacs-lisp-mode)
			 (let ((sym (intern candidate)))
			   (cond ((fboundp sym) 'Function)
					 ((featurep sym) 'Module)
					 ((facep sym) 'Color)
					 ((boundp sym) 'Variable)
					 ((symbolp sym) 'Text)
					 (t . nil)))))
		 (with-eval-after-load 'all-the-icons
		   (declare-function all-the-icons-faicon 'all-the-icons)
		   (declare-function all-the-icons-fileicon 'all-the-icons)
		   (declare-function all-the-icons-material 'all-the-icons)
		   (declare-function all-the-icons-octicon 'all-the-icons)
		   (setq company-box-icons-all-the-icons
				 `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.7 :v-adjust -0.15))
				   (Text . ,(all-the-icons-faicon "book" :height 0.68 :v-adjust -0.15))
				   (Method . ,(all-the-icons-faicon "cube" :height 0.7 :v-adjust -0.05 :face 'font-lock-constant-face))
				   (Function . ,(all-the-icons-faicon "cube" :height 0.7 :v-adjust -0.05 :face 'font-lock-constant-face))
				   (Constructor . ,(all-the-icons-faicon "cube" :height 0.7 :v-adjust -0.05 :face 'font-lock-constant-face))
				   (Field . ,(all-the-icons-faicon "tags" :height 0.65 :v-adjust -0.15 :face 'font-lock-warning-face))
				   (Variable . ,(all-the-icons-faicon "tag" :height 0.7 :v-adjust -0.05 :face 'font-lock-warning-face))
				   (Class . ,(all-the-icons-faicon "clone" :height 0.65 :v-adjust 0.01 :face 'font-lock-constant-face))
				   (Interface . ,(all-the-icons-faicon "clone" :height 0.65 :v-adjust 0.01))
				   (Module . ,(all-the-icons-octicon "package" :height 0.7 :v-adjust -0.15))
				   (Property . ,(all-the-icons-octicon "package" :height 0.7 :v-adjust -0.05 :face 'font-lock-warning-face)) ;; Golang module
				   (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.7 :v-adjust -0.15))
				   (Value . ,(all-the-icons-material "format_align_right" :height 0.7 :v-adjust -0.15 :face 'font-lock-constant-face))
				   (Enum . ,(all-the-icons-material "storage" :height 0.7 :v-adjust -0.15 :face 'all-the-icons-orange))
				   (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.7 :v-adjust -0.15))
				   (Snippet . ,(all-the-icons-faicon "code" :height 0.7 :v-adjust 0.02 :face 'font-lock-variable-name-face))
				   (Color . ,(all-the-icons-material "palette" :height 0.7 :v-adjust -0.15))
				   (File . ,(all-the-icons-faicon "file-o" :height 0.7 :v-adjust -0.05))
				   (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.7 :v-adjust -0.15))
				   (Folder . ,(all-the-icons-octicon "file-directory" :height 0.7 :v-adjust -0.05))
				   (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.7 :v-adjust -0.15 :face 'all-the-icons-blueb))
				   (Constant . ,(all-the-icons-faicon "tag" :height 0.7 :v-adjust -0.05))
				   (Struct . ,(all-the-icons-faicon "clone" :height 0.65 :v-adjust 0.01 :face 'font-lock-constant-face))
				   (Event . ,(all-the-icons-faicon "bolt" :height 0.7 :v-adjust -0.05 :face 'all-the-icons-orange))
				   (Operator . ,(all-the-icons-fileicon "typedoc" :height 0.65 :v-adjust 0.05))
				   (TypeParameter . ,(all-the-icons-faicon "hashtag" :height 0.65 :v-adjust 0.07 :face 'font-lock-const-face))
				   (Template . ,(all-the-icons-faicon "code" :height 0.7 :v-adjust 0.02 :face 'font-lock-variable-name-face)))))
		 )

	   ;; Popup documentation for completion candidates
	   (use-package company-quickhelp
		 :defines company-quickhelp-delay
		 :bind (:map company-active-map
					 ([remap company-show-doc-buffer] . company-quickhelp-manual-begin))
		 :hook (global-company-mode . company-quickhelp-mode)
		 :init (setq company-quickhelp-delay 0.5)))

	 (use-package company-lsp
	   :init (setq company-lsp-cache-candidates 'auto)
	   :config
	   (add-to-list 'company-lsp-filter-candidates '(mspyls))
	   (with-no-warnings
		 (defun my-company-lsp--on-completion (response prefix)
		   "Handle completion RESPONSE.
					PREFIX is a string of the prefix when the completion is requested.
					Return a list of strings as the completion candidates."
		   (let* ((incomplete (and (hash-table-p response) (gethash "isIncomplete" response)))
				  (items (cond ((hash-table-p response) (gethash "items" response))
							   ((sequencep response) response)))
				  (candidates (mapcar (lambda (item)
										(company-lsp--make-candidate item prefix))
									  (lsp--sort-completions items)))
				  (server-id (lsp--client-server-id (lsp--workspace-client lsp--cur-workspace)))
				  (should-filter (or (eq company-lsp-cache-candidates 'auto)
									 (and (null company-lsp-cache-candidates)
										  (company-lsp--get-config company-lsp-filter-candidates server-id)))))
			 (when (null company-lsp--completion-cache)
			   (add-hook 'company-completion-cancelled-hook #'company-lsp--cleanup-cache nil t)
			   (add-hook 'company-completion-finished-hook #'company-lsp--cleanup-cache nil t))
			 (when (eq company-lsp-cache-candidates 'auto)
			   ;; Only cache candidates on auto mode. If it's t company caches the
			   ;; candidates for us.
			   (company-lsp--cache-put prefix (company-lsp--cache-item-new candidates incomplete)))
			 (if should-filter
				 (company-lsp--filter-candidates candidates prefix)
			   candidates)))
		 (advice-add #'company-lsp--on-completion :override #'my-company-lsp--on-completion)))

   #+END_SRC

** Projectile

   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package projectile
	   :diminish
	   :bind (:map projectile-mode-map
				   ("s-t" . projectile-find-file)
				   ("C-c p" . projectile-command-map))
	   :hook (after-init . projectile-mode)
	   :init
	   (setq projectile-mode-line-prefix ""
			 projectile-sort-order 'recentf
			 projectile-use-git-grep t))

	 (use-package counsel-projectile
	   :after (counsel projectile)
	   :config (counsel-projectile-mode 1))

   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package magit
	   :ensure
	   :bind
	   ("C-x g" . magit-status))
   #+END_SRC
** Yasnippets
   #+BEGIN_SRC emacs-lisp :tangle yes

	 (use-package yasnippet
	   :diminish yas-minor-mode
	   :hook (after-init . yas-global-mode)
	   :config (use-package yasnippet-snippets))

	 (use-package ivy-yasnippet :after yasnippet)
	 (use-package react-snippets :after yasnippet)
   #+END_SRC
** Paréntesis

   Muestra por color los paréntesis  agrupados
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package rainbow-delimiters
	   :defer 1
	   :hook (prog-mode . rainbow-delimiters-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package smartparens
	   :defer 1
	   :delight
	   :custom (sp-escape-quotes-after-insert nil)
	   :config (smartparens-global-mode 1))
   #+END_SRC

** Treemacs
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package treemacs
	   :commands (treemacs-follow-mode
				  treemacs-filewatch-mode
				  treemacs-fringe-indicator-mode
				  treemacs-git-mode)
	   :bind (([f8]        . treemacs)
			  ("M-0"       . treemacs-select-window)
			  ("C-x 1"     . treemacs-delete-other-windows)
			  ("C-x t 1"   . treemacs-delete-other-windows)
			  ("C-x t t"   . treemacs)
			  ("C-x t b"   . treemacs-bookmark)
			  ("C-x t C-t" . treemacs-find-file)
			  ("C-x t M-t" . treemacs-find-tag)
			  :map treemacs-mode-map
			  ([mouse-1]   . treemacs-single-click-expand-action))
	   :config
	   (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
			 treemacs-sorting                       'alphabetic-case-insensitive-desc
			 treemacs-follow-after-init             t
			 treemacs-is-never-other-window         t
			 treemacs-silent-filewatch              t
			 treemacs-silent-refresh                t
			 treemacs-width                         25)
	   (treemacs-follow-mode t)
	   (treemacs-filewatch-mode t)
	   (pcase (cons (not (null (executable-find "git")))
					(not (null (executable-find "python3"))))
		 (`(t . t)
		  (treemacs-git-mode 'deferred))
		 (`(t . _)
		  (treemacs-git-mode 'simple)))
	   ;; Projectile integration
	   (use-package treemacs-projectile
		 :after projectile
		 :bind (([M-f8] . treemacs-projectile)
				:map projectile-command-map
				("h" . treemacs-projectile)))
	   (use-package treemacs-magit
		 :after magit
		 :commands treemacs-magit--schedule-update
		 :hook ((magit-post-commit
				 git-commit-post-finish
				 magit-post-stage
				 magit-post-unstage)
				. treemacs-magit--schedule-update)))

   #+END_SRC
** Dired
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package dired
	   :ensure nil
	   :commands dired
	   :bind (("C-x d" . dired)
			  :map dired-mode-map
			  ("RET" . dired-find-alternate-file))
	   :custom
	   (dired-recursive-copies 'top)	     ;; Always ask recursive copy
	   (dired-recursive-deletes 'top)     ;; Always ask recursive delete
	   (dired-dwim-target t)		     ;; Copy in split mode with p
	   (dired-auto-revert-buffer t)
	   :config
	   (put 'dired-find-alternate-file 'disabled nil))
   #+END_SRC
** Dired-sidebar
   Dired sider para administración de las las carpetas
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package dired-sidebar
	   :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
	   :ensure t
	   :commands (dired-sidebar-toggle-sidebar)
	   :init
	   (add-hook 'dired-sidebar-mode-hook
				 (lambda ()
				   (unless (file-remote-p default-directory)
					 (auto-revert-mode))))
	   :config
	   (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
	   (push 'rotate-windows dired-sidebar-toggle-hidden-commands)

	   (setq dired-sidebar-subtree-line-prefix "__")
	   (setq dired-sidebar-theme 'vscode)
	   (setq dired-sidebar-use-term-integration t)
	   (setq dired-sidebar-use-custom-font t))
   #+END_SRC
** Ledger
   Finanzas con emacs
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package ledger-mode
	   :mode ("\\.dat\\'"
			  "\\.ledger\\'")
	   :custom (ledger-clear-whole-transactions t))

	 ;; (use-package flycheck-ledger
	 ;;    :after ledger-mode)
   #+END_SRC
** SkewerMode
   Un preview para el desarrollo de front end
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package skewer-mode
	   :config (skewer-setup))
   #+END_SRC
** Mode line format
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package smart-mode-line)
   #+END_SRC
** Engine-mode
   Interface con el navedador para buscar desde emacs
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package engine-mode
	   :defer 3
	   :config
	   (defengine amazon
		 "http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s"
		 :keybinding "a")

	   (defengine duckduckgo
		 "https://duckduckgo.com/?q=%s"
		 :keybinding "d")

	   (defengine github
		 "https://github.com/search?ref=simplesearch&q=%s"
		 :keybinding "g")

	   (defengine google-images
		 "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
		 :keybinding "i")

	   (defengine google-maps
		 "http://maps.google.com/maps?q=%s"
		 :keybinding "m"
		 :docstring "Mappin' it up.")

	   (defengine stack-overflow
		 "https://stackoverflow.com/search?q=%s"
		 :keybinding "s")

	   (defengine youtube
		 "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
		 :keybinding "y")

	   (defengine wikipedia
		 "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
		 :keybinding "w"
		 :docstring "Searchin' the wikis.")
	   (engine-mode t))
   #+END_SRC

** iMenu
   Mostrar el menu con las funciones de los archivos
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package imenu
	   :ensure nil
	   :bind (("C-." . imenu)))
   #+END_SRC
** Go to last change
   Ir al último cambio realizado
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package goto-last-change
	   :bind ("C-," . goto-last-change))
   #+END_SRC
** Typit (juego para mejorar escritura)
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package typit
	   :ensure t
	   :commands (typit)
	   :config (setq typit-dict "español.txt"))
	 ;;(use-package speed-type)
   #+END_SRC
** Polymode
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package polymode
	   :ensure t
	   :mode
	   ("\.php" . poly-web-mode)
	   ("\.org" . poly-org-mode))

	 (use-package poly-org
	   :ensure t)


	 (define-hostmode poly-web-hostmode
	   :mode 'web-mode
	   :protect-syntax t
	   :protect-font-lock t)

	 (define-innermode poly-php-web-innermode
											 ;:fallback-mode 'host
	   :mode 'php-mode
	   :head-mode 'host
	   :tail-mode 'host
	   :head-matcher (eval-when-compile
					   (rx (or (: "<?php" word-end)
							   (: "<?=")
							   (: "<?" (or " " "\t" "\n" "\r")))))
	   :tail-matcher (eval-when-compile
					   (rx "?>"))
	   :body-indent-offset 4
	   )

	 (define-polymode poly-web-mode
	   :hostmode 'poly-web-hostmode
	   :innermodes '(poly-php-web-innermode)
	   (make-local-variable 'polymode-move-these-minor-modes-from-old-buffer))
   #+END_SRC

* ORG-MODE
** Agenda
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package org-agenda
	   :ensure nil
	   :after org
	   :bind ("C-c a" . org-agenda)
	   :custom
	   (org-agenda-dim-blocked-tasks t) ; Diseño compacto
											 ;(org-agenda-files (directory-files-recursively "~/Notas" "\.org$")) ; Incluir archivos de este directori
	   (org-directory "~/Notas")
	   (org-agenda-files (directory-files-recursively org-directory "\.org$")) ; Incluir archivos de este directorio
	   (org-agenda-include-diary nil)
	   (org-agenda-diary-file "~/Notas/Personales/Diario.org")
	   (org-agenda-show-log t) ; Muestra los logs de la agenda
	   (org-agenda-skip-deadline-if-done t) ; No incluir tareas hechas con deadline
	   (org-agenda-skip-scheduled-if-done t) ; Lo mismo de arriba pero planeadas
	   (org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
	   (org-agenda-start-on-weekday 1) ; Inicia la agenda en la semana actual
	   (org-agenda-span 7) ; Días que se mostraran en la agenda
	   (org-deadline-warning-days 10) ; Advertir sobre una fecha límite
	   (org-agenda-sticky nil)
	   (org-agenda-inhibit-startup t) ; Deshabilita los startup de los buffer nuevos
	   (org-habit-show-habits-only-for-today nil) ; Mustra los habitos registrados
	   (org-agenda-window-setup 'current-window) ; Iniciar la agenda en la ventana actual
	   (org-agenda-tags-column -100) ; Las columnas que se usaran para mostrar la agenda

	   (org-priority-faces '((?A . error)
							 (?B . warning)
							 (?C . success)))
	   (org-ellipsis (if (char-displayable-p ?) "  " nil))
	   )
   #+END_SRC
** Bullets
   Cambia el aspecto de los bullets
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package org-bullets
	   :hook (org-mode . org-bullets-mode))
   #+END_SRC

** Toc-org
   Mantendrá una tabla de contenido en el primer encabezado que tiene una etiqueta :TOC:.
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package toc-org
	   :after org
	   :hook (org-mode . toc-org-enable))
   #+END_SRC

** ORG-indent
   Aspecto mejorado al indentar
   #+BEGIN_SRC emacs-lisp :tangle yes
	 ;;Modo mas limpio de org
	 (use-package org-indent
	   :after org
	   :ensure nil
	   :delight)
   #+END_SRC

** ORG-Contacts
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package org-contacts
	   :ensure nil
	   :after org
	   :custom
	   (org-contacts-files '("~/Notas/Personales/Contactos.org")))

   #+END_SRC

** ORG-babel
   Configuración de babel para distintos lenguajes

   #+BEGIN_SRC emacs-lisp :tangle yes
	 (setq org-confirm-babel-evaluate nil
		   org-src-fontify-natively t
		   org-src-tab-acts-natively t)

	 (org-babel-do-load-languages
	  'org-babel-load-languages
	  '((dot . t)
		(emacs-lisp . t)
		(shell . t)
		(python . t)
		(gnuplot . t)
		(latex . t)
		(ledger . t)
		(sql . t)
		(sqlite . t)
		(plantuml . t)))
   #+END_SRC
** Preview
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package org-preview-html
	   :diminish)
   #+END_SRC
** Cifrar y descifrar
   Configuración para cifrar algunas partes de archivos org

   #+BEGIN_SRC emacs-lisp :tangle yes
	 (require 'org-crypt)
	 (org-crypt-use-before-save-magic)
	 (setq org-tags-exclude-from-inheritance (quote ("crypt")))

	 (setq org-crypt-key nil)

	 ;;(setq auto-save-default nil)
   #+END_SRC

** Org-Capture
   Siempre es bueno tener una forma más sencilla de agregar notas y ubicarlas automáticamente al lugar que le corresponde
   #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package org-capture
	   :ensure nil
	   :after org
	   :bind ("C-c c" . org-capture)
	   :preface
	   (defvar my/personal-ledger-file "~/Notas/Personales/Finanzas.ledger")
	   (defvar my/personal-file "~/Notas/Personales/Personal.org")
	   (defun my/generate-openssl-password ()
		 (replace-regexp-in-string "\n\\'" ""
								   (shell-command-to-string "openssl rand -base64 15")))
	   :custom
	   (org-capture-templates
		'(
		  ;; Plantilla para capturar páginas de interes
		  ("l" "Link (l)" item (file+headline "~/Notas/Personales/Personal.org" "Links")
		   "- [[%^{Dirección}][%^{Nombre}]] %^{Descripción}\n"
		   :immediate-finish t)

		  ("q" "Nota rápida" item
		   (file+headline "~/Notas/Notas.org" "Notas rápidas"))

		  ;; Capturas personales
		  ("p" "Personales")
		  ;; Contactos
		  ("pc" "Contacto (c)" entry (file+headline "~/Notas/Personales/Personal.org" "Contactos")
		   "* %^{Nombre} %^{Apellido}%?
						  :PROPERTIES:
						  :Nombre:    %\\1
						  :Apellido:     %\\2
						  :Cumpleaños: %^{Fecha de Nacimiento}u
						  :Teléfono:    %^{Teléfono}
						  :Email:    %^{Email}
						  :Nota:
						  :END:" :empty-lines 1)

		  ;; Gestor de contraseñas y cuentas (accounts)
		  ("pa" "Cuentas (p)" entry (file+headline "~/Notas/Personales/Personal.org" "Cuentas")
		   "* %^{Nombre de la cuenta}?
						 :PROPERTIES:
						 :Web: %^{Sitio web}
						 :Usuario: %^{Usuario}
						 :Email: %^{Email}
						 :Contraseña: %(my/generate-openssl-password)
						 :Pregunta: %^{Pregunta de seguridad}
						 :Nota:
						 :END:" :empty-lines 1)

		  ;; Finanzas personales
		  ("pf" "Finanzas (f)" file "~/Notas/Personales/Finanzas.ledger"
		   "%(org-read-date) %^{Descripcion}
						  %^{CuentaDestino|Pasivo|Gastos}:%^{Accion|Comida|Transporte|Telefonía|Prestamo}  $%^{Monto}
						  %^{CuentaSaliente|Activo|Pasivo}:%^{Flujo|Banco|Efectio}  %^{Monto}")

		  ;; Compras personales
		  ("pb" "Comprar (b)")
		  ("pbn" "Comprar ahora (n)" checkitem (file+olp "~/Notas/Personales/Personal.org" "Compras" "Brevedad")
		   "[ ] %^{Que comprar}\n"
		   :immediate-finish t)

		  ("pbs" "Comprar algun día (s)" checkitem (file+olp "~/Notas/Personales/Personal.org" "Compras" "Algún día")
		   "[ ] %^{Que comprar}\n"
		   :immediate-finish t)

		  ;; Cosas que deseo
		  ("pw" "Deseos (w)")

		  ("pwl" "Aprender (l)" checkitem (file+olp "~/Notas/Personales/Personal.org" "Deseos" "Aprender")
		   "[ ] %^{Qué deseo aprender}\n"
		   :immediate-finish t)

		  ("pwd" "Hacer (d)" checkitem (file+olp "~/Notas/Personales/Personal.org" "Deseos" "Hacer")
		   "[ ] %^{Qué deseo hacer}\n"
		   :immediate-finish t)

		  ("pwt" "Viajar (t)" checkitem (file+olp "~/Notas/Personales/Personal.org" "Deseos" "Viajar")
		   "[ ] %^{A dónde quiero viajar?}\n"
		   :immediate-finish t)

		  ("pwL" "Proyecto de vida (L)" checkitem (file+olp "~/Notas/Personales/Personal.org" "Deseos" "Proyecto de vida")
		   "[ ] %^{Cúal es mi proyecto de vida?}\n"
		   :immediate-finish t)

		  ;; Agenda
		  ("ps" "Agenda (s)")
		  ("psc" "Llamar (c)" entry (file+headline "~/Notas/Personales/Agenda.org" "Llamar")
		   "** Llamar a %^{Quién?}
						   CLOSED: %U
						  :PROPERTIES:
						  :NOTA: %^{Nota o información adicional}
						  :END:
						  %T\n")

		  ("psm" "Reunión (m)" entry (file+headline "~/Notas/Personales/Agenda.org" "Reunión")
		   "** Reunión con %^{Quién?}
						  CLOSED: %U
						  :PROPERTIES:
						  :NOTA: %^{Nota o información adicional}
						  :Lugar: %^{Ludar de la reunion}
						  :END:
						  %T\n")

		  ;;Diario
		  ("pj" "Diario (j)" entry (file+datetree "~/Notas/Personales/Diario.org" "Diario")
		   "** %U
				%?" :empty-lines 1)

		  ;; Empresa
		  ("e" "Empresa")
		  ("ej" "Diario (j)" entry (file+datetree "~/Notas/Empresa/Diario.org" "Diario")
		   "** %U
				%?" :empty-lines 1)

		  )
		))
   #+END_SRC
